"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Views = void 0;
class Views {
    constructor(client) {
        this.client = client;
    }
    // Generic method to get columns for any entity
    async columns(entity, query, headers) {
        return await this.client.fetch(`/admin/views/${entity}/columns`, {
            method: "GET",
            headers,
            query,
        });
    }
    async listConfigurations(entity, query, headers) {
        return await this.client.fetch(`/admin/views/${entity}/configurations`, {
            method: "GET",
            headers,
            query,
        });
    }
    async createConfiguration(entity, body, headers) {
        return await this.client.fetch(`/admin/views/${entity}/configurations`, {
            method: "POST",
            headers,
            body,
        });
    }
    async retrieveConfiguration(entity, id, query, headers) {
        return await this.client.fetch(`/admin/views/${entity}/configurations/${id}`, {
            method: "GET",
            headers,
            query,
        });
    }
    async updateConfiguration(entity, id, body, headers) {
        return await this.client.fetch(`/admin/views/${entity}/configurations/${id}`, {
            method: "POST",
            headers,
            body,
        });
    }
    async deleteConfiguration(entity, id, headers) {
        return await this.client.fetch(`/admin/views/${entity}/configurations/${id}`, {
            method: "DELETE",
            headers,
        });
    }
    async retrieveActiveConfiguration(entity, headers) {
        return await this.client.fetch(`/admin/views/${entity}/configurations/active`, {
            method: "GET",
            headers,
        });
    }
    async setActiveConfiguration(entity, body, headers) {
        return await this.client.fetch(`/admin/views/${entity}/configurations/active`, {
            method: "POST",
            headers,
            body,
        });
    }
}
exports.Views = Views;
//# sourceMappingURL=views.js.map