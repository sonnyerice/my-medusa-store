import { HttpTypes, SelectParams } from "@medusajs/types";
import { Client } from "../client";
import { ClientHeaders } from "../types";
export declare class Views {
    private client;
    constructor(client: Client);
    columns(entity: string, query?: SelectParams, headers?: ClientHeaders): Promise<HttpTypes.AdminViewsEntityColumnsResponse>;
    listConfigurations(entity: string, query?: HttpTypes.AdminGetViewConfigurationsParams, headers?: ClientHeaders): Promise<HttpTypes.AdminViewConfigurationListResponse>;
    createConfiguration(entity: string, body: HttpTypes.AdminCreateViewConfiguration, headers?: ClientHeaders): Promise<HttpTypes.AdminViewConfigurationResponse>;
    retrieveConfiguration(entity: string, id: string, query?: SelectParams, headers?: ClientHeaders): Promise<HttpTypes.AdminViewConfigurationResponse>;
    updateConfiguration(entity: string, id: string, body: HttpTypes.AdminUpdateViewConfiguration, headers?: ClientHeaders): Promise<HttpTypes.AdminViewConfigurationResponse>;
    deleteConfiguration(entity: string, id: string, headers?: ClientHeaders): Promise<HttpTypes.AdminViewConfigurationDeleteResponse>;
    retrieveActiveConfiguration(entity: string, headers?: ClientHeaders): Promise<HttpTypes.AdminViewConfigurationResponse & {
        active_view_configuration_id?: string | null;
    }>;
    setActiveConfiguration(entity: string, body: {
        view_configuration_id: string | null;
    }, headers?: ClientHeaders): Promise<{
        success: boolean;
    }>;
}
//# sourceMappingURL=views.d.ts.map