{"version":3,"file":"data-table-non-sortable-header-cell.js","sourceRoot":"","sources":["../../../../../src/blocks/data-table/components/data-table-non-sortable-header-cell.tsx"],"names":[],"mappings":";;;;AAAA,qDAA8B;AAC9B,gDAA+C;AAC/C,kDAAwC;AACxC,8CAA0C;AAQ7B,QAAA,8BAA8B,GAAG,KAAK,CAAC,UAAU,CAG5D,CAAC,EAAE,EAAE,EAAE,QAAQ,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,EAAE,aAAa,EAAE,GAAG,KAAK,EAAE,EAAE,GAAG,EAAE,EAAE;IAChF,gDAAgD;IAChD,MAAM,EACJ,UAAU,EACV,SAAS,EACT,UAAU,GACX,GAAG,IAAA,sBAAW,EAAC;QACd,EAAE;QACF,QAAQ,EAAE,IAAI,EAAE,mBAAmB;KACpC,CAAC,CAAA;IAEF,sDAAsD;IACtD,MAAM,cAAc,GAAG,SAAS,CAAC,CAAC,CAAC;QACjC,CAAC,EAAE,SAAS,CAAC,CAAC;QACd,CAAC,EAAE,CAAC;QACJ,MAAM,EAAE,SAAS,CAAC,MAAM;QACxB,MAAM,EAAE,SAAS,CAAC,MAAM;KACzB,CAAC,CAAC,CAAC,IAAI,CAAA;IAER,MAAM,KAAK,GAAwB;QACjC,GAAG,SAAS;QACZ,SAAS,EAAE,cAAc,CAAC,CAAC,CAAC,eAAG,CAAC,SAAS,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,SAAS;QAC9E,UAAU;QACV,QAAQ,EAAE,UAAmB;KAC9B,CAAA;IAED,MAAM,WAAW,GAAG,CAAC,OAAoC,EAAE,EAAE;QAC3D,UAAU,CAAC,OAAO,CAAC,CAAA;QACnB,IAAI,GAAG,EAAE,CAAC;YACR,IAAI,OAAO,GAAG,KAAK,UAAU,EAAE,CAAC;gBAC9B,GAAG,CAAC,OAAO,CAAC,CAAA;YACd,CAAC;iBAAM,CAAC;gBACN,GAAG,CAAC,OAAO,GAAG,OAAO,CAAA;YACvB,CAAC;QACH,CAAC;IACH,CAAC,CAAA;IAED,OAAO,CACL,oBAAC,aAAK,CAAC,UAAU,IACf,GAAG,EAAE,WAAW,EAChB,KAAK,EAAE,KAAK,EACZ,SAAS,EAAE,SAAS,KAChB,KAAK,IAER,QAAQ,CACQ,CACpB,CAAA;AACH,CAAC,CAAC,CAAA;AAEF,sCAA8B,CAAC,WAAW,GAAG,gCAAgC,CAAA","sourcesContent":["import * as React from \"react\"\nimport { useSortable } from \"@dnd-kit/sortable\"\nimport { CSS } from \"@dnd-kit/utilities\"\nimport { Table } from \"@/components/table\"\n\ninterface DataTableNonSortableHeaderCellProps extends React.HTMLAttributes<HTMLTableCellElement> {\n  id: string\n  children: React.ReactNode\n  isFirstColumn?: boolean\n}\n\nexport const DataTableNonSortableHeaderCell = React.forwardRef<\n  HTMLTableCellElement,\n  DataTableNonSortableHeaderCellProps\n>(({ id, children, className, style: propStyle, isFirstColumn, ...props }, ref) => {\n  // Still use sortable hook but without listeners\n  const {\n    setNodeRef,\n    transform,\n    transition,\n  } = useSortable({\n    id,\n    disabled: true, // Disable dragging\n  })\n\n  // Only apply horizontal transform for smooth shifting\n  const transformStyle = transform ? {\n    x: transform.x,\n    y: 0,\n    scaleX: transform.scaleX,\n    scaleY: transform.scaleY,\n  } : null\n\n  const style: React.CSSProperties = {\n    ...propStyle,\n    transform: transformStyle ? CSS.Transform.toString(transformStyle) : undefined,\n    transition,\n    position: 'relative' as const,\n  }\n\n  const combineRefs = (element: HTMLTableCellElement | null) => {\n    setNodeRef(element)\n    if (ref) {\n      if (typeof ref === 'function') {\n        ref(element)\n      } else {\n        ref.current = element\n      }\n    }\n  }\n\n  return (\n    <Table.HeaderCell\n      ref={combineRefs}\n      style={style}\n      className={className}\n      {...props}\n    >\n      {children}\n    </Table.HeaderCell>\n  )\n})\n\nDataTableNonSortableHeaderCell.displayName = \"DataTableNonSortableHeaderCell\""]}