"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodemailerNotificationProviderService = void 0;
const utils_1 = require("@medusajs/framework/utils");
const nodemailer_1 = __importDefault(require("nodemailer"));
class NodemailerNotificationProviderService extends utils_1.AbstractNotificationProviderService {
    constructor(_, options) {
        super();
        this.options_ = options;
        this.transporter = nodemailer_1.default.createTransport(options);
    }
    static validateOptions(options) {
        if (!options.host) {
            throw new utils_1.MedusaError(utils_1.MedusaError.Types.INVALID_DATA, `"host" is required in the ${this.identifier} provider's options.`);
        }
        if (!options.port) {
            throw new utils_1.MedusaError(utils_1.MedusaError.Types.INVALID_DATA, `"port" is required in the ${this.identifier} provider's options.`);
        }
    }
    async send(notification) {
        const { to, content } = notification;
        if (!(0, utils_1.isDefined)(this.options_.from) && !(0, utils_1.isDefined)(notification.from)) {
            throw new utils_1.MedusaError(utils_1.MedusaError.Types.INVALID_DATA, `"from" is required in the ${NodemailerNotificationProviderService.identifier} provider's options.`);
        }
        let html;
        if ((0, utils_1.isDefined)(content?.html) || (0, utils_1.isDefined)(content?.text)) {
            html = content?.html ?? content?.text;
        }
        let attachments = [];
        if ((0, utils_1.isDefined)(notification.attachments) &&
            Array.isArray(notification.attachments) &&
            notification.attachments.length > 0) {
            attachments = notification.attachments.map((attachment) => ({
                content: attachment.content,
                filename: attachment.filename,
                contentType: attachment.content_type,
                contentDisposition: attachment.disposition === 'inline' ||
                    attachment.disposition === 'attachment'
                    ? attachment.disposition
                    : undefined,
                cid: attachment.id,
                contentTransferEncoding: attachment.content_type === 'text/html'
                    ? 'quoted-printable'
                    : 'base64',
            }));
        }
        const mailOptions = {
            from: notification.from ?? this.options_.from,
            to,
            subject: content?.subject,
        };
        if ((0, utils_1.isDefined)(html)) {
            mailOptions.html = html;
        }
        if (attachments.length > 0) {
            mailOptions.attachments = attachments;
        }
        const info = await this.transporter.sendMail(mailOptions);
        return {
            id: info.messageId,
        };
    }
}
exports.NodemailerNotificationProviderService = NodemailerNotificationProviderService;
NodemailerNotificationProviderService.identifier = 'nodemailer';
exports.default = NodemailerNotificationProviderService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9wcm92aWRlcnMvbm9kZW1haWxlci9zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUlBLHFEQUlrQztBQUNsQyw0REFBeUQ7QUFVekQsTUFBYSxxQ0FBc0MsU0FBUSwyQ0FBbUM7SUFNN0YsWUFBWSxDQUFDLEVBQUUsT0FBc0I7UUFDcEMsS0FBSyxFQUFFLENBQUE7UUFDUCxJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQTtRQUN2QixJQUFJLENBQUMsV0FBVyxHQUFHLG9CQUFVLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBQ3ZELENBQUM7SUFFRCxNQUFNLENBQUMsZUFBZSxDQUFDLE9BQXlCO1FBQy9DLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDbkIsTUFBTSxJQUFJLG1CQUFXLENBQ3BCLG1CQUFXLENBQUMsS0FBSyxDQUFDLFlBQVksRUFDOUIsNkJBQTZCLElBQUksQ0FBQyxVQUFVLHNCQUFzQixDQUNsRSxDQUFBO1FBQ0YsQ0FBQztRQUVELElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDbkIsTUFBTSxJQUFJLG1CQUFXLENBQ3BCLG1CQUFXLENBQUMsS0FBSyxDQUFDLFlBQVksRUFDOUIsNkJBQTZCLElBQUksQ0FBQyxVQUFVLHNCQUFzQixDQUNsRSxDQUFBO1FBQ0YsQ0FBQztJQUNGLENBQUM7SUFFRCxLQUFLLENBQUMsSUFBSSxDQUNULFlBQXlDO1FBRXpDLE1BQU0sRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLEdBQUcsWUFBWSxDQUFBO1FBRXBDLElBQUksQ0FBQyxJQUFBLGlCQUFTLEVBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUEsaUJBQVMsRUFBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztZQUNyRSxNQUFNLElBQUksbUJBQVcsQ0FDcEIsbUJBQVcsQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUM5Qiw2QkFBNkIscUNBQXFDLENBQUMsVUFBVSxzQkFBc0IsQ0FDbkcsQ0FBQTtRQUNGLENBQUM7UUFFRCxJQUFJLElBQXdCLENBQUE7UUFDNUIsSUFBSSxJQUFBLGlCQUFTLEVBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxJQUFJLElBQUEsaUJBQVMsRUFBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQztZQUMxRCxJQUFJLEdBQUcsT0FBTyxFQUFFLElBQUksSUFBSSxPQUFPLEVBQUUsSUFBSSxDQUFBO1FBQ3RDLENBQUM7UUFFRCxJQUFJLFdBQVcsR0FBc0IsRUFBRSxDQUFBO1FBQ3ZDLElBQ0MsSUFBQSxpQkFBUyxFQUFDLFlBQVksQ0FBQyxXQUFXLENBQUM7WUFDbkMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDO1lBQ3ZDLFlBQVksQ0FBQyxXQUFXLENBQUMsTUFBTSxHQUFHLENBQUMsRUFDbEMsQ0FBQztZQUNGLFdBQVcsR0FBRyxZQUFZLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsQ0FBQztnQkFDM0QsT0FBTyxFQUFFLFVBQVUsQ0FBQyxPQUFPO2dCQUMzQixRQUFRLEVBQUUsVUFBVSxDQUFDLFFBQVE7Z0JBQzdCLFdBQVcsRUFBRSxVQUFVLENBQUMsWUFBWTtnQkFDcEMsa0JBQWtCLEVBQ2pCLFVBQVUsQ0FBQyxXQUFXLEtBQUssUUFBUTtvQkFDbkMsVUFBVSxDQUFDLFdBQVcsS0FBSyxZQUFZO29CQUN0QyxDQUFDLENBQUMsVUFBVSxDQUFDLFdBQVc7b0JBQ3hCLENBQUMsQ0FBQyxTQUFTO2dCQUNiLEdBQUcsRUFBRSxVQUFVLENBQUMsRUFBRTtnQkFDbEIsdUJBQXVCLEVBQ3RCLFVBQVUsQ0FBQyxZQUFZLEtBQUssV0FBVztvQkFDdEMsQ0FBQyxDQUFDLGtCQUFrQjtvQkFDcEIsQ0FBQyxDQUFDLFFBQVE7YUFDWixDQUFDLENBQUMsQ0FBQTtRQUNKLENBQUM7UUFFRCxNQUFNLFdBQVcsR0FBaUI7WUFDakMsSUFBSSxFQUFFLFlBQVksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJO1lBQzdDLEVBQUU7WUFDRixPQUFPLEVBQUUsT0FBTyxFQUFFLE9BQU87U0FDekIsQ0FBQTtRQUVELElBQUksSUFBQSxpQkFBUyxFQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7WUFDckIsV0FBVyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUE7UUFDeEIsQ0FBQztRQUVELElBQUksV0FBVyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQztZQUM1QixXQUFXLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQTtRQUN0QyxDQUFDO1FBRUQsTUFBTSxJQUFJLEdBQUcsTUFBTSxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQTtRQUV6RCxPQUFPO1lBQ04sRUFBRSxFQUFFLElBQUksQ0FBQyxTQUFTO1NBQ2xCLENBQUE7SUFDRixDQUFDOztBQXZGRixzRkF3RkM7QUF2Rk8sZ0RBQVUsR0FBRyxZQUFZLENBQUE7QUF5RmpDLGtCQUFlLHFDQUFxQyxDQUFBIn0=